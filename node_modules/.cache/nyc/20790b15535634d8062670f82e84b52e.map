{"version":3,"sources":["user.js"],"names":["UsersCtrl","req","res","status","json","UsersData","body","title","firstname","lastname","emailAddress","phoneNumber","role","gender","passport","contactAddress","id","length","staffId","createdAt","Date","newUser","push","msg","data","password","userDetail","find","user","token","jwt","sign","process","env","SECRET","expiresIn","userIndex"],"mappings":"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","sourceRoot":"/Users/andela/Desktop/sm/store-manager/app/controller","sourcesContent":["import jwt from 'jsonwebtoken';\n\nimport UsersData from '../data/users';\n\n/**\n * @class UsersCtrl\n * @classdesc manages Users\n */\nclass UsersCtrl {\n  /**\n   * @description - retrieves all users\n   * @param {*} req - Request object\n   * @param {*} res - response object\n   * @returns {users} returns Users\n   */\n  static getAllUser(req, res) {\n    return res.status(200).json({ UsersData });\n  }\n\n  /**\n   * @description Create a new user either as an Admin or a sale attendant\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {null} - no returns\n   */\n  static createUser(req, res) {\n    const {\n      title,\n      firstname,\n      lastname,\n      emailAddress,\n      phoneNumber,\n      role,\n      gender,\n      passport,\n      contactAddress\n    } = req.body;\n    const id = UsersData.length + 1;\n    const staffId = `SM0${id}`;\n    const createdAt = new Date();\n    const newUser = {\n      id,\n      title,\n      staffId,\n      firstname,\n      lastname,\n      emailAddress,\n      phoneNumber,\n      role,\n      gender,\n      passport,\n      contactAddress,\n      createdAt\n    };\n    UsersData.push(newUser);\n    res.status(201).json({\n      msg: 'New user successfully created',\n      data: newUser\n    });\n  }\n\n  /**\n   * @description - Accept two field to login a user\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {null} - no return\n   */\n  static userLogin(req, res) {\n    const { staffId, password } = req.body;\n    const userDetail = UsersData.find(user => user.staffId === staffId && user.password === password);\n    if (userDetail) {\n      const token = jwt.sign({ staffId: `${userDetail.role}` }, process.env.SECRET, { expiresIn: '1h' });\n      return res.status(200).json({\n        msg: 'Login successful',\n        token\n      });\n    }\n    res.status(404).json({\n      msg: 'Login failed'\n    });\n  }\n\n  /**\n   * @description - Reset user password\n   * @param {*} req - request object\n   * @param {*} res  - response object\n   * @returns {null} - No returns\n   */\n  static resetPassword(req, res) {\n    const { emailAddress } = req.body;\n    const userIndex = UsersData.find(user => user.emailAddress === emailAddress);\n    if (userIndex) {\n      return res.status(200).json({\n        msg: `A mail has been forwarded to ${emailAddress}. Follow the link to reset your password`,\n        emailAddress\n      });\n    }\n    res.status(404).json({\n      msg: `Your email address: ${emailAddress} is not recognised.`\n    });\n  }\n}\n\nexport default UsersCtrl;\n"]}