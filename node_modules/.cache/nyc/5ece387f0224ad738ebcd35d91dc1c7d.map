{"version":3,"sources":["products.spec.js"],"names":["request","app","productId","dummyData","name","category","description","minimumAllowed","quantity","price","image","describe","it","done","get","end","err","res","status","to","equal","body","msg","haveOwnProperty","data","be","an","length","products","id","forEach","product","post","set","send"],"mappings":"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","sourceRoot":"/Users/andela/Documents/store-manager/tests","sourcesContent":["import { expect } from 'chai';\nimport supertest from 'supertest';\nimport app from '../app/app';\n\nconst request = supertest(app);\nlet productId = null;\n\nconst dummyData = {\n  name: 'test name',\n  category: 'phone',\n  description: 'test product',\n  minimumAllowed: 200,\n  quantity: 10,\n  price: 'N4000',\n  image: 'tet.png'\n};\n\ndescribe('GET /api/v1', () => {\n  it('Should load route', (done) => {\n    request\n      .get('/api/v1/')\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.status).to.equal(200);\n        expect(res.body.msg).to.equal('Welcome to Store Manager 1.0');\n        done();\n      });\n  });\n});\n\ndescribe('GET available products', () => {\n  it('should get all available products', (done) => {\n    request\n      .get('/api/v1/products')\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.status).to.equal(200);\n        expect(res.body).to.haveOwnProperty('data');\n        expect(res.body.data).to.be.an('array');\n        expect(res.body.data.length).to.equal(3);\n        const products = res.body.data;\n        productId = products[0].id;\n        products.forEach((product) => {\n          expect(product).to.be.an('object');\n          expect(product).to.haveOwnProperty('name');\n          expect(product).to.haveOwnProperty('id');\n          expect(product).to.haveOwnProperty('category');\n          expect(product).to.haveOwnProperty('price');\n          expect(product).to.haveOwnProperty('description');\n          expect(product).to.haveOwnProperty('image');\n          expect(product).to.haveOwnProperty('minimumAllowed');\n        });\n        done();\n      });\n  });\n});\n\ndescribe('GET single product', () => {\n  it('should get a single products', (done) => {\n    request\n      .get(`/api/v1/products/${productId}`)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.status).to.equal(200);\n        expect(res.body).to.haveOwnProperty('data');\n        expect(res.body.data).to.be.an('object');\n        done();\n      });\n  });\n});\n\ndescribe('Create Product', () => {\n  it('should create a product', (done) => {\n    request\n      .post('/api/v1/products')\n      .set('Content-Type', 'Application/json')\n      .send(dummyData)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.msg).to.equal('A new product was successfully created');\n        expect(res.body.data).to.be.an('object');\n        done();\n      });\n  });\n});\n"]}