{"version":3,"sources":["sales.js"],"names":["SalesRecordCtrl","req","res","status","json","msg","data","salesRecords","saleId","params","sales","find","sale","id","parseInt","sid","filter","sellerId","body","saleAttendantName","productId","name","quantity","price","totalAmount","category","date","newSale","push"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;;;IAIMA,e;;;;;;;;;;AACJ;;;;;;2BAMcC,G,EAAKC,G,EAAK;AACtBA,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ;AACJC,QAAAA,GAAG,EAAE,qCADD;AAEJC,QAAAA,IAAI,EAAEC;AAFF,OADR;AAKD;AAED;;;;;;;;;2BAMcN,G,EAAKC,G,EAAK;AAAA,UACdM,MADc,GACHP,GAAG,CAACQ,MADD,CACdD,MADc;;AAEtB,UAAME,KAAK,GAAGH,eAAaI,IAAb,CAAkB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYC,QAAQ,CAACN,MAAD,EAAS,EAAT,CAAxB;AAAA,OAAtB,CAAd;;AACA,UAAIE,KAAJ,EAAW;AACT,eAAOR,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,GAAG,EAAE,mCADqB;AAE1BC,UAAAA,IAAI,EAAEI;AAFoB,SAArB,CAAP;AAID;;AACDR,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,GAAG,EAAE;AADc,OAArB;AAGD;AAED;;;;;;;;;iCAMoBJ,G,EAAKC,G,EAAK;AAAA,UACpBa,GADoB,GACZd,GAAG,CAACQ,MADQ,CACpBM,GADoB;;AAE5B,UAAML,KAAK,GAAGH,eAAaS,MAAb,CAAoB,UAAAJ,IAAI;AAAA,eAAIA,IAAI,CAACK,QAAL,KAAkBF,GAAtB;AAAA,OAAxB,CAAd;;AACA,UAAIL,KAAJ,EAAW;AACT,eAAOR,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,GAAG,EAAE,qCADqB;AAE1BC,UAAAA,IAAI,EAAEI;AAFoB,SAArB,CAAP;AAID;;AACDR,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,GAAG,EAAE;AADc,OAArB;AAGD;AAED;;;;;;;;;4BAMeJ,G,EAAKC,G,EAAK;AAAA,sBAGnBD,GAAG,CAACiB,IAHe;AAAA,UAErBL,EAFqB,aAErBA,EAFqB;AAAA,UAEjBI,QAFiB,aAEjBA,QAFiB;AAAA,UAEPE,iBAFO,aAEPA,iBAFO;AAAA,UAEYC,SAFZ,aAEYA,SAFZ;AAAA,UAEuBC,IAFvB,aAEuBA,IAFvB;AAAA,UAE6BC,QAF7B,aAE6BA,QAF7B;AAAA,UAEuCC,KAFvC,aAEuCA,KAFvC;AAAA,UAE8CC,WAF9C,aAE8CA,WAF9C;AAAA,UAE2DC,QAF3D,aAE2DA,QAF3D;AAAA,UAEqEC,IAFrE,aAEqEA,IAFrE;AAIvB,UAAMC,OAAO,GAAG;AACdd,QAAAA,EAAE,EAAFA,EADc;AACVI,QAAAA,QAAQ,EAARA,QADU;AACAE,QAAAA,iBAAiB,EAAjBA,iBADA;AACmBC,QAAAA,SAAS,EAATA,SADnB;AAC8BC,QAAAA,IAAI,EAAJA,IAD9B;AACoCC,QAAAA,QAAQ,EAARA,QADpC;AAC8CC,QAAAA,KAAK,EAALA,KAD9C;AACqDC,QAAAA,WAAW,EAAXA,WADrD;AACkEC,QAAAA,QAAQ,EAARA,QADlE;AAC4EC,QAAAA,IAAI,EAAJA;AAD5E,OAAhB;;AAGAnB,qBAAaqB,IAAb,CAAkBD,OAAlB;;AACAzB,MAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,GAAG,EAAE,sCADc;AAEnBC,QAAAA,IAAI,EAAEqB;AAFa,OAArB;AAID;;;;;eAGY3B,e","sourceRoot":"/Users/andela/Desktop/sm/store-manager/app/controller","sourcesContent":["import salesRecords from '../data/sales';\n\n/**\n * @class SalesRecordCtrl\n * @classdesc - Manages sales record\n */\nclass SalesRecordCtrl {\n  /**\n   * @description  retrives all sale records\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {salesrecords} - Sales Records\n   */\n  static getAll(req, res) {\n    res.status(200)\n      .json({\n        msg: 'Sale records successfully retrieved',\n        data: salesRecords\n      });\n  }\n\n  /**\n   * @description retrieves a single user sales record\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {sales} - users sales\n   */\n  static getOne(req, res) {\n    const { saleId } = req.params;\n    const sales = salesRecords.find(sale => sale.id === parseInt(saleId, 10));\n    if (sales) {\n      return res.status(200).json({\n        msg: 'Sale record retrived successfully',\n        data: sales\n      });\n    }\n    res.status(404).json({\n      msg: 'No sale record found'\n    });\n  }\n\n  /**\n   * @description retrieves all user sale records\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {sales} - user sale records\n   */\n  static getUserSales(req, res) {\n    const { sid } = req.params;\n    const sales = salesRecords.filter(sale => sale.sellerId === sid);\n    if (sales) {\n      return res.status(200).json({\n        msg: 'Sale records successfully retrieved',\n        data: sales\n      });\n    }\n    res.status(404).json({\n      msg: 'No data found'\n    });\n  }\n\n  /**\n   * @description Create a new sale record\n   * @param {*} req - request object\n   * @param {*} res  - response object\n   * @returns {sales} return sales\n   */\n  static addSale(req, res) {\n    const {\n      id, sellerId, saleAttendantName, productId, name, quantity, price, totalAmount, category, date\n    } = req.body;\n    const newSale = {\n      id, sellerId, saleAttendantName, productId, name, quantity, price, totalAmount, category, date\n    };\n    salesRecords.push(newSale);\n    res.status(201).json({\n      msg: 'Sale record was successfully created',\n      data: newSale\n    });\n  }\n}\n\nexport default SalesRecordCtrl;\n"]}