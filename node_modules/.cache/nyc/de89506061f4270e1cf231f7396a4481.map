{"version":3,"sources":["product.js"],"names":["ProductCtrl","req","res","status","json","msg","data","availableProducts","id","params","product","find","prd","parseInt","send","keys","Object","body","productIndex","findIndex","p","forEach","key","name","price","description","minimumAllowed","image","category","length","file","prdImage","filename","checkBody","notEmpty","errors","validationErrors","newProduct","push","splice"],"mappings":"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","sourceRoot":"/Users/andela/Desktop/sm/store-manager/app/controller","sourcesContent":["import availableProducts from '../data/products';\n\n/**\n * @class ProductCtrl\n * @classdesc manages products\n */\nclass ProductCtrl {\n  /**\n   * @description retrieves all products\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {products} - all available products\n   */\n  static getAll(req, res) {\n    res.status(200)\n      .json({\n        msg: 'products successfully retrieved',\n        data: availableProducts\n      });\n  }\n\n  /**\n   * @description retrieve a single product\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {product} - Product detail\n   */\n  static getOne(req, res) {\n    const { id } = req.params;\n    const product = availableProducts.find(prd => prd.id === parseInt(id, 10));\n    if (product) {\n      return res.status(200).send({\n        msg: 'product successfully found',\n        data: product\n      });\n    }\n    res.status(404).send({ msg: 'product not found' });\n  }\n\n  /**\n   * @description - Update a product\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {null} - no returns\n   */\n  static updateOne(req, res) {\n    const { id } = req.params;\n    const keys = Object.keys(req.body);\n    const product = availableProducts.find(prd => prd.id === parseInt(id, 10));\n    const productIndex = availableProducts.findIndex(p => p.id === parseInt(id, 10));\n    if (product) {\n      keys.forEach((key) => {\n        product[key] = req.body[key];\n      });\n      availableProducts[productIndex] = product;\n      return res.status(200).send({\n        msg: 'Product successfully updated',\n        data: product,\n      });\n    }\n    res.status(404).json({\n      msg: 'Product not found',\n    });\n  }\n\n  /**\n   * @description - Create a new product\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {product} - Product\n   */\n  static addProduct(req, res) {\n    const {\n      name, price, description, minimumAllowed, image, category\n    } = req.body;\n    const id = availableProducts.length + 1;\n    // Handle Image\n    if (req.file) {\n      const prdImage = req.file.filename;\n    }\n    const prdImage = 'noImage.jpg';\n\n    // Validate form\n    req.checkBody('name', 'Name field is required').notEmpty();\n    req.checkBody('category', 'Category field is required').notEmpty();\n    req.checkBody('price', 'Price field is required').notEmpty();\n    req.checkBody('description', 'Description field is required').notEmpty();\n    req.checkBody('quantity', 'Quantity field is required').notEmpty();\n    req.checkBody('minimumAllowed', 'Minimum field is required').notEmpty();\n\n    // Check errors\n    const errors = req.validationErrors();\n    if (errors) {\n      res.status(400).json({ errors });\n    } else {\n      const newProduct = {\n        id, name, price, description, minimumAllowed, image, category\n      };\n      availableProducts.push(newProduct);\n      res.status(201).json({\n        msg: 'A new product was successfully created',\n        data: newProduct\n      });\n    }\n  }\n\n  /**\n   * @description - Delete an existing product\n   * @param {*} req - request object\n   * @param {*} res - response object\n   * @returns {nulll} - no returns\n   */\n  static deleteProduct(req, res) {\n    const { id } = req.params;\n    const productIndex = availableProducts.findIndex(prd => prd.id === parseInt(id, 10));\n    if (productIndex > -1) {\n      availableProducts.splice(productIndex, 1);\n      res.status(200).json({\n        msg: 'Product Deleted'\n      });\n    } else {\n      res.status(404).send({\n        msg: 'Product not found'\n      });\n    }\n  }\n}\n\nexport default ProductCtrl;\n"]}