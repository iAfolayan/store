{"version":3,"sources":["sales.spec.js"],"names":["request","app","saleId","dummyData","sellerId","saleAttendantName","productId","name","category","quantity","price","totalAmount","description","minimumAllowed","date","describe","it","done","get","end","err","res","status","to","equal","body","haveOwnProperty","data","be","an","length","sales","id","forEach","sale","post","set","send","msg"],"mappings":"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","sourceRoot":"/Users/andela/Documents/store-manager/tests","sourcesContent":["import { expect } from 'chai';\nimport supertest from 'supertest';\nimport app from '../app/app';\n\nconst request = supertest(app);\nlet saleId = null;\n\nconst dummyData = {\n  sellerId: 'SA568',\n  saleAttendantName: 'Afolayan Isaiah',\n  productId: 2,\n  name: 'wireless bluetooth',\n  category: 'phone',\n  quantity: 50,\n  price: 'N4000',\n  totalAmount: 75000,\n  description: 'test product',\n  minimumAllowed: 200,\n  date: '2018-10-18:00:00:25GMT'\n};\n\ndescribe('GET available sale records', () => {\n  it('should get all sale records', (done) => {\n    request\n      .get('/api/v1/sales')\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.status).to.equal(200);\n        expect(res.body).to.haveOwnProperty('data');\n        expect(res.body.data).to.be.an('array');\n        expect(res.body.data.length).to.equal(5);\n        const sales = res.body.data;\n        saleId = sales[0].id;\n        sales.forEach((sale) => {\n          expect(sale).to.be.an('object');\n          expect(sale).to.haveOwnProperty('sellerId');\n          expect(sale).to.haveOwnProperty('id');\n          expect(sale).to.haveOwnProperty('saleAttendantName');\n          expect(sale).to.haveOwnProperty('productId');\n          expect(sale).to.haveOwnProperty('name');\n          expect(sale).to.haveOwnProperty('quantity');\n          expect(sale).to.haveOwnProperty('price');\n          expect(sale).to.haveOwnProperty('totalAmount');\n          expect(sale).to.haveOwnProperty('category');\n          expect(sale).to.haveOwnProperty('date');\n        });\n        done();\n      });\n  });\n});\n\ndescribe('GET single sale', () => {\n  it('should get a single sale', (done) => {\n    request\n      .get(`/api/v1/sales/${saleId}`)\n      .end((err, res) => {\n        if (err) return done(err);\n        expect(res.status).to.equal(200);\n        expect(res.body).to.haveOwnProperty('data');\n        expect(res.body.data).to.be.an('object');\n        done();\n      });\n  });\n});\n\ndescribe('Create Sale Record', () => {\n  it('should create a sale record', (done) => {\n    request\n      .post('/api/v1/sales')\n      .set('Content-Type', 'Application/json')\n      .send(dummyData)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.msg).to.equal('Sale record was successfully created');\n        expect(res.body.data).to.be.an('object');\n        done();\n      });\n  });\n});\n"]}